// For a given list of digits 0 to 9, return a list with the same digits in the same order, but with all 0s paired. Pairing two 0s generates one 0 at the location of the first one.

// Examples
// input: [0, 1, 0, 2]
// paired: ^-----^
//     -> [0, 1,   2]
//   kept: ^

// input: [0, 1, 0, 0]
// paired: ^-----^
//     -> [0, 1,    0]
//   kept: ^        ^

// input: [1, 0, 7, 0, 1]
// paired:    ^-----^
//     -> [1, 0, 7,    1]
//   kept:    ^

// input: [0, 1, 7, 0, 2, 2, 0, 0, 1, 0]
// paired: ^--------^        ^--^
//     -> [0, 1, 7,    2, 2, 0,    1, 0]
//   kept: ^                 ^        ^
// Notes
// Pairing happens from left to right. For each pairing, the second 0 will always be paired towards the first ( right to left )
// 0s generated by pairing can NOT be paired again
// ( void where not applicable: ) Don't modify the input array or you may fail to pass the tests

// SOLUTION 1

// function pairZeros(arr) {
//   let copyArr = [...arr];
//   let counter = 0;
//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i] === 0) {
//       if (counter) {
//         copyArr[i] = "e";
//         counter = 0;
//       } else {
//         counter = 1;
//       }
//     }
//   }
//   return copyArr.filter((el) => el !== "e");
// }

// SOLUTION 2, BETTER MORE EFFICIENT
function pairZeros(arr) {
  const result = [];
  let counter = 0;

  for (const num of arr) {
    if (num === 0) {
      if (counter === 1) {
        counter = 0; // Pair the zero
      } else {
        result.push(num); // Keep the zero
        counter = 1;
      }
    } else {
      result.push(num); // Keep non-zero elements
    }
  }

  return result;
}

const isEqual = (arr1, arr2) => {
  return JSON.stringify(arr1) === JSON.stringify(arr2);
};

// TESTS //

const startArray1 = [0, 1, 0, 2];
const result1 = pairZeros(startArray1);
const expectedResult = [0, 1, 2];
console.log(result1, "RESULT 1");
console.log(isEqual(result1, expectedResult));

const startArray2 = [0, 1, 7, 0, 2, 2, 0, 0, 1, 0];
const result2 = pairZeros(startArray2);
const expectedResult2 = [0, 1, 7, 2, 2, 0, 1, 0];
console.log(result2, "RESULT 2");
console.log(isEqual(result2, expectedResult2));
